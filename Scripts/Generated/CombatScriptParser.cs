//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Q:/.UnityProjects/UGCRPG/Assets/CombatScript/Scripts/CombatScriptParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class CombatScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ADD=1, SUB=2, MUL=3, DIV=4, MOD=5, POW=6, BWNEG=7, BWAND=8, BWOR=9, BWXOR=10, 
		BWLS=11, BWRS=12, EQ=13, NEQ=14, LT=15, LE=16, GT=17, GE=18, NEG=19, AND=20, 
		OR=21, VAR=22, ASSIGN=23, IF=24, ELSE=25, SWITCH=26, CASE=27, DEFAULT=28, 
		WHILE=29, FOR=30, FOREACH=31, IN=32, BREAK=33, CONTINUE=34, RETURN=35, 
		INCR=36, DECR=37, LP=38, RP=39, LB=40, RB=41, LC=42, RC=43, COLON=44, 
		SEMICOLON=45, COMMA=46, RANGE=47, DOT=48, LAMBDA=49, NULL=50, INT=51, 
		FLOAT=52, UINT=53, BOOL=54, STRING=55, NEW=56, ID=57, WS=58, COMMENT=59;
	public const int
		RULE_program = 0, RULE_expression = 1, RULE_member_access = 2, RULE_function_call = 3, 
		RULE_array_access = 4, RULE_primitive = 5, RULE_value = 6, RULE_ctor = 7, 
		RULE_range = 8, RULE_lambda = 9, RULE_array = 10, RULE_arithmetic_op = 11, 
		RULE_bitwise_op = 12, RULE_comparison_op = 13, RULE_logical_op = 14, RULE_variable_definition = 15, 
		RULE_variable_access = 16, RULE_variable_assignment = 17, RULE_variable_increment = 18, 
		RULE_statement = 19, RULE_scope = 20, RULE_conditional = 21, RULE_switch = 22, 
		RULE_switchBranch = 23, RULE_case = 24, RULE_for_loop = 25, RULE_foreach_loop = 26, 
		RULE_while_loop = 27;
	public static readonly string[] ruleNames = {
		"program", "expression", "member_access", "function_call", "array_access", 
		"primitive", "value", "ctor", "range", "lambda", "array", "arithmetic_op", 
		"bitwise_op", "comparison_op", "logical_op", "variable_definition", "variable_access", 
		"variable_assignment", "variable_increment", "statement", "scope", "conditional", 
		"switch", "switchBranch", "case", "for_loop", "foreach_loop", "while_loop"
	};

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'-'", "'*'", "'/'", "'%'", "'**'", "'~'", "'&'", "'|'", 
		"'^'", "'<<'", "'>>'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'!'", 
		"'&&'", "'||'", "'var'", "'='", "'if'", "'else'", "'switch'", "'case'", 
		"'default'", "'while'", "'for'", "'foreach'", "'in'", "'break'", "'continue'", 
		"'return'", "'++'", "'--'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
		"':'", "';'", "','", "'..'", "'.'", "'=>'", "'null'", null, null, null, 
		null, null, "'new'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ADD", "SUB", "MUL", "DIV", "MOD", "POW", "BWNEG", "BWAND", "BWOR", 
		"BWXOR", "BWLS", "BWRS", "EQ", "NEQ", "LT", "LE", "GT", "GE", "NEG", "AND", 
		"OR", "VAR", "ASSIGN", "IF", "ELSE", "SWITCH", "CASE", "DEFAULT", "WHILE", 
		"FOR", "FOREACH", "IN", "BREAK", "CONTINUE", "RETURN", "INCR", "DECR", 
		"LP", "RP", "LB", "RB", "LC", "RC", "COLON", "SEMICOLON", "COMMA", "RANGE", 
		"DOT", "LAMBDA", "NULL", "INT", "FLOAT", "UINT", "BOOL", "STRING", "NEW", 
		"ID", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CombatScriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CombatScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CombatScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CombatScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CombatScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext[] scope() {
			return GetRuleContexts<ScopeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope(int i) {
			return GetRuleContext<ScopeContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 278138503932936324L) != 0)) {
				{
				{
				State = 56;
				scope();
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 62;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(CombatScriptParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(CombatScriptParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(CombatScriptParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BWNEG() { return GetToken(CombatScriptParser.BWNEG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEG() { return GetToken(CombatScriptParser.NEG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(CombatScriptParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW() { return GetToken(CombatScriptParser.POW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(CombatScriptParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(CombatScriptParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(CombatScriptParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BWAND() { return GetToken(CombatScriptParser.BWAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BWOR() { return GetToken(CombatScriptParser.BWOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BWXOR() { return GetToken(CombatScriptParser.BWXOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BWLS() { return GetToken(CombatScriptParser.BWLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BWRS() { return GetToken(CombatScriptParser.BWRS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(CombatScriptParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(CombatScriptParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(CombatScriptParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(CombatScriptParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(CombatScriptParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(CombatScriptParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(CombatScriptParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(CombatScriptParser.OR, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				{
				State = 65;
				Match(LP);
				State = 66;
				expression(0);
				State = 67;
				Match(RP);
				}
				}
				break;
			case 2:
				{
				State = 69;
				Match(SUB);
				State = 70;
				expression(15);
				}
				break;
			case 3:
				{
				State = 71;
				Match(BWNEG);
				State = 72;
				expression(10);
				}
				break;
			case 4:
				{
				State = 73;
				Match(NEG);
				State = 74;
				expression(4);
				}
				break;
			case 5:
				{
				State = 75;
				value();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 113;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 111;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 78;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						{
						State = 79;
						Match(MOD);
						}
						State = 80;
						expression(15);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 81;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						{
						State = 82;
						Match(POW);
						}
						State = 83;
						expression(14);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 84;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 85;
						_la = TokenStream.LA(1);
						if ( !(_la==MUL || _la==DIV) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 86;
						expression(13);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 87;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 88;
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 89;
						expression(12);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 90;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 91;
						Match(BWAND);
						State = 92;
						expression(10);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 93;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 94;
						Match(BWOR);
						State = 95;
						expression(9);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 96;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 97;
						Match(BWXOR);
						State = 98;
						expression(8);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 99;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 100;
						_la = TokenStream.LA(1);
						if ( !(_la==BWLS || _la==BWRS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 101;
						expression(7);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 102;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 103;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 516096L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 104;
						expression(6);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 105;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 106;
						Match(AND);
						State = 107;
						expression(4);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 108;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 109;
						Match(OR);
						State = 110;
						expression(3);
						}
						break;
					}
					} 
				}
				State = 115;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Member_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(CombatScriptParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CombatScriptParser.ID, 0); }
		public Member_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_access; } }
	}

	[RuleVersion(0)]
	public Member_accessContext member_access() {
		Member_accessContext _localctx = new Member_accessContext(Context, State);
		EnterRule(_localctx, 4, RULE_member_access);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(DOT);
			State = 117;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(CombatScriptParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(CombatScriptParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CombatScriptParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CombatScriptParser.COMMA, i);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 6, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(LP);
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 278098651380187268L) != 0)) {
				{
				State = 120;
				expression(0);
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 121;
					Match(COMMA);
					State = 122;
					expression(0);
					}
					}
					State = 127;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 130;
			Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LB() { return GetToken(CombatScriptParser.LB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RB() { return GetToken(CombatScriptParser.RB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CombatScriptParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CombatScriptParser.COMMA, i);
		}
		public Array_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_access; } }
	}

	[RuleVersion(0)]
	public Array_accessContext array_access() {
		Array_accessContext _localctx = new Array_accessContext(Context, State);
		EnterRule(_localctx, 8, RULE_array_access);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(LB);
			State = 133;
			expression(0);
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 134;
				Match(COMMA);
				State = 135;
				expression(0);
				}
				}
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 141;
			Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CombatScriptParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(CombatScriptParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(CombatScriptParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(CombatScriptParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CombatScriptParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(CombatScriptParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext lambda() {
			return GetRuleContext<LambdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CtorContext ctor() {
			return GetRuleContext<CtorContext>(0);
		}
		public PrimitiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive; } }
	}

	[RuleVersion(0)]
	public PrimitiveContext primitive() {
		PrimitiveContext _localctx = new PrimitiveContext(Context, State);
		EnterRule(_localctx, 10, RULE_primitive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 143;
				Match(ID);
				}
				break;
			case 2:
				{
				State = 144;
				Match(FLOAT);
				}
				break;
			case 3:
				{
				State = 145;
				Match(INT);
				}
				break;
			case 4:
				{
				State = 146;
				Match(BOOL);
				}
				break;
			case 5:
				{
				State = 147;
				Match(STRING);
				}
				break;
			case 6:
				{
				State = 148;
				Match(NULL);
				}
				break;
			case 7:
				{
				State = 149;
				range();
				}
				break;
			case 8:
				{
				State = 150;
				lambda();
				}
				break;
			case 9:
				{
				State = 151;
				array();
				}
				break;
			case 10:
				{
				State = 152;
				ctor();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_accessContext[] member_access() {
			return GetRuleContexts<Member_accessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_accessContext member_access(int i) {
			return GetRuleContext<Member_accessContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext[] function_call() {
			return GetRuleContexts<Function_callContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call(int i) {
			return GetRuleContext<Function_callContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_accessContext[] array_access() {
			return GetRuleContexts<Array_accessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_accessContext array_access(int i) {
			return GetRuleContext<Array_accessContext>(i);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 12, RULE_value);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			primitive();
			State = 161;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 159;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DOT:
						{
						State = 156;
						member_access();
						}
						break;
					case LP:
						{
						State = 157;
						function_call();
						}
						break;
					case LB:
						{
						State = 158;
						array_access();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 163;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CtorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(CombatScriptParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CombatScriptParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(CombatScriptParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(CombatScriptParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CombatScriptParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CombatScriptParser.COMMA, i);
		}
		public CtorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctor; } }
	}

	[RuleVersion(0)]
	public CtorContext ctor() {
		CtorContext _localctx = new CtorContext(Context, State);
		EnterRule(_localctx, 14, RULE_ctor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			Match(NEW);
			State = 165;
			Match(ID);
			State = 166;
			Match(LP);
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 278098651380187268L) != 0)) {
				{
				State = 167;
				expression(0);
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 168;
					Match(COMMA);
					State = 169;
					expression(0);
					}
					}
					State = 174;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 177;
			Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(CombatScriptParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(CombatScriptParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(CombatScriptParser.RANGE, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 16, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(INT);
			State = 180;
			Match(RANGE);
			State = 181;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(CombatScriptParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(CombatScriptParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(CombatScriptParser.LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(CombatScriptParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(CombatScriptParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LC() { return GetToken(CombatScriptParser.LC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RC() { return GetToken(CombatScriptParser.RC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CombatScriptParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CombatScriptParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext[] scope() {
			return GetRuleContexts<ScopeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope(int i) {
			return GetRuleContext<ScopeContext>(i);
		}
		public LambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda; } }
	}

	[RuleVersion(0)]
	public LambdaContext lambda() {
		LambdaContext _localctx = new LambdaContext(Context, State);
		EnterRule(_localctx, 18, RULE_lambda);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(LP);
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 184;
				Match(ID);
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 185;
					Match(COMMA);
					State = 186;
					Match(ID);
					}
					}
					State = 191;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 194;
			Match(RP);
			State = 195;
			Match(LAMBDA);
			State = 205;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUB:
			case BWNEG:
			case NEG:
			case LP:
			case LB:
			case NULL:
			case INT:
			case FLOAT:
			case BOOL:
			case STRING:
			case NEW:
			case ID:
				{
				State = 196;
				expression(0);
				}
				break;
			case LC:
				{
				{
				State = 197;
				Match(LC);
				State = 201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 278138503932936324L) != 0)) {
					{
					{
					State = 198;
					scope();
					}
					}
					State = 203;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 204;
				Match(RC);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LB() { return GetToken(CombatScriptParser.LB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RB() { return GetToken(CombatScriptParser.RB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CombatScriptParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CombatScriptParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 20, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(LB);
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 278098651380187268L) != 0)) {
				{
				State = 208;
				expression(0);
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 209;
					Match(COMMA);
					State = 210;
					expression(0);
					}
					}
					State = 213;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				}
			}

			State = 217;
			Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arithmetic_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(CombatScriptParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(CombatScriptParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(CombatScriptParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(CombatScriptParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(CombatScriptParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW() { return GetToken(CombatScriptParser.POW, 0); }
		public Arithmetic_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetic_op; } }
	}

	[RuleVersion(0)]
	public Arithmetic_opContext arithmetic_op() {
		Arithmetic_opContext _localctx = new Arithmetic_opContext(Context, State);
		EnterRule(_localctx, 22, RULE_arithmetic_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 126L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bitwise_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BWAND() { return GetToken(CombatScriptParser.BWAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BWOR() { return GetToken(CombatScriptParser.BWOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BWXOR() { return GetToken(CombatScriptParser.BWXOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BWLS() { return GetToken(CombatScriptParser.BWLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BWRS() { return GetToken(CombatScriptParser.BWRS, 0); }
		public Bitwise_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwise_op; } }
	}

	[RuleVersion(0)]
	public Bitwise_opContext bitwise_op() {
		Bitwise_opContext _localctx = new Bitwise_opContext(Context, State);
		EnterRule(_localctx, 24, RULE_bitwise_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7936L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(CombatScriptParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(CombatScriptParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(CombatScriptParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(CombatScriptParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(CombatScriptParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(CombatScriptParser.GE, 0); }
		public Comparison_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_op; } }
	}

	[RuleVersion(0)]
	public Comparison_opContext comparison_op() {
		Comparison_opContext _localctx = new Comparison_opContext(Context, State);
		EnterRule(_localctx, 26, RULE_comparison_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 516096L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(CombatScriptParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(CombatScriptParser.OR, 0); }
		public Logical_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_op; } }
	}

	[RuleVersion(0)]
	public Logical_opContext logical_op() {
		Logical_opContext _localctx = new Logical_opContext(Context, State);
		EnterRule(_localctx, 28, RULE_logical_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(CombatScriptParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CombatScriptParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(CombatScriptParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Variable_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_definition; } }
	}

	[RuleVersion(0)]
	public Variable_definitionContext variable_definition() {
		Variable_definitionContext _localctx = new Variable_definitionContext(Context, State);
		EnterRule(_localctx, 30, RULE_variable_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			Match(VAR);
			State = 228;
			Match(ID);
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 229;
				Match(ASSIGN);
				State = 230;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CombatScriptParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_accessContext member_access() {
			return GetRuleContext<Member_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_accessContext array_access() {
			return GetRuleContext<Array_accessContext>(0);
		}
		public Variable_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_access; } }
	}

	[RuleVersion(0)]
	public Variable_accessContext variable_access() {
		Variable_accessContext _localctx = new Variable_accessContext(Context, State);
		EnterRule(_localctx, 32, RULE_variable_access);
		try {
			State = 239;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 233;
				Match(ID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 234;
				expression(0);
				State = 237;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 235;
					member_access();
					}
					break;
				case LB:
					{
					State = 236;
					array_access();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_accessContext variable_access() {
			return GetRuleContext<Variable_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(CombatScriptParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_opContext arithmetic_op() {
			return GetRuleContext<Arithmetic_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_opContext bitwise_op() {
			return GetRuleContext<Bitwise_opContext>(0);
		}
		public Variable_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_assignment; } }
	}

	[RuleVersion(0)]
	public Variable_assignmentContext variable_assignment() {
		Variable_assignmentContext _localctx = new Variable_assignmentContext(Context, State);
		EnterRule(_localctx, 34, RULE_variable_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			variable_access();
			State = 244;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case SUB:
			case MUL:
			case DIV:
			case MOD:
			case POW:
				{
				State = 242;
				arithmetic_op();
				}
				break;
			case BWAND:
			case BWOR:
			case BWXOR:
			case BWLS:
			case BWRS:
				{
				State = 243;
				bitwise_op();
				}
				break;
			case ASSIGN:
				break;
			default:
				break;
			}
			State = 246;
			Match(ASSIGN);
			State = 247;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_incrementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_accessContext variable_access() {
			return GetRuleContext<Variable_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCR() { return GetToken(CombatScriptParser.INCR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECR() { return GetToken(CombatScriptParser.DECR, 0); }
		public Variable_incrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_increment; } }
	}

	[RuleVersion(0)]
	public Variable_incrementContext variable_increment() {
		Variable_incrementContext _localctx = new Variable_incrementContext(Context, State);
		EnterRule(_localctx, 36, RULE_variable_increment);
		int _la;
		try {
			State = 254;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INCR:
			case DECR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 249;
				_la = TokenStream.LA(1);
				if ( !(_la==INCR || _la==DECR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 250;
				variable_access();
				}
				break;
			case SUB:
			case BWNEG:
			case NEG:
			case LP:
			case LB:
			case NULL:
			case INT:
			case FLOAT:
			case BOOL:
			case STRING:
			case NEW:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 251;
				variable_access();
				State = 252;
				_la = TokenStream.LA(1);
				if ( !(_la==INCR || _la==DECR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_definitionContext variable_definition() {
			return GetRuleContext<Variable_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_assignmentContext variable_assignment() {
			return GetRuleContext<Variable_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_incrementContext variable_increment() {
			return GetRuleContext<Variable_incrementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(CombatScriptParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(CombatScriptParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(CombatScriptParser.CONTINUE, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 256;
				variable_definition();
				}
				break;
			case 2:
				{
				State = 257;
				variable_assignment();
				}
				break;
			case 3:
				{
				State = 258;
				variable_increment();
				}
				break;
			case 4:
				{
				State = 259;
				expression(0);
				}
				break;
			case 5:
				{
				State = 260;
				Match(RETURN);
				State = 262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 278098651380187268L) != 0)) {
					{
					State = 261;
					expression(0);
					}
				}

				}
				break;
			case 6:
				{
				State = 264;
				Match(BREAK);
				}
				break;
			case 7:
				{
				State = 265;
				Match(CONTINUE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LC() { return GetToken(CombatScriptParser.LC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RC() { return GetToken(CombatScriptParser.RC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext[] scope() {
			return GetRuleContexts<ScopeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope(int i) {
			return GetRuleContext<ScopeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CombatScriptParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public For_loopContext for_loop() {
			return GetRuleContext<For_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Foreach_loopContext foreach_loop() {
			return GetRuleContext<Foreach_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_loopContext while_loop() {
			return GetRuleContext<While_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalContext conditional() {
			return GetRuleContext<ConditionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchContext @switch() {
			return GetRuleContext<SwitchContext>(0);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 40, RULE_scope);
		int _la;
		try {
			State = 284;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LC:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 268;
				Match(LC);
				State = 272;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 278138503932936324L) != 0)) {
					{
					{
					State = 269;
					scope();
					}
					}
					State = 274;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 275;
				Match(RC);
				}
				}
				break;
			case SUB:
			case BWNEG:
			case NEG:
			case VAR:
			case BREAK:
			case CONTINUE:
			case RETURN:
			case INCR:
			case DECR:
			case LP:
			case LB:
			case SEMICOLON:
			case NULL:
			case INT:
			case FLOAT:
			case BOOL:
			case STRING:
			case NEW:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 276;
				statement();
				State = 277;
				Match(SEMICOLON);
				}
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 279;
				for_loop();
				}
				break;
			case FOREACH:
				EnterOuterAlt(_localctx, 4);
				{
				State = 280;
				foreach_loop();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 281;
				while_loop();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 6);
				{
				State = 282;
				conditional();
				}
				break;
			case SWITCH:
				EnterOuterAlt(_localctx, 7);
				{
				State = 283;
				@switch();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(CombatScriptParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(CombatScriptParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LP() { return GetTokens(CombatScriptParser.LP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP(int i) {
			return GetToken(CombatScriptParser.LP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RP() { return GetTokens(CombatScriptParser.RP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP(int i) {
			return GetToken(CombatScriptParser.RP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext[] scope() {
			return GetRuleContexts<ScopeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope(int i) {
			return GetRuleContext<ScopeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(CombatScriptParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(CombatScriptParser.ELSE, i);
		}
		public ConditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional; } }
	}

	[RuleVersion(0)]
	public ConditionalContext conditional() {
		ConditionalContext _localctx = new ConditionalContext(Context, State);
		EnterRule(_localctx, 42, RULE_conditional);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			Match(IF);
			State = 287;
			Match(LP);
			State = 288;
			expression(0);
			State = 289;
			Match(RP);
			State = 290;
			scope();
			State = 300;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 291;
					Match(ELSE);
					State = 292;
					Match(IF);
					State = 293;
					Match(LP);
					State = 294;
					expression(0);
					State = 295;
					Match(RP);
					State = 296;
					scope();
					}
					} 
				}
				State = 302;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			State = 305;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 303;
				Match(ELSE);
				State = 304;
				scope();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(CombatScriptParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(CombatScriptParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(CombatScriptParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LC() { return GetToken(CombatScriptParser.LC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RC() { return GetToken(CombatScriptParser.RC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBranchContext[] switchBranch() {
			return GetRuleContexts<SwitchBranchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBranchContext switchBranch(int i) {
			return GetRuleContext<SwitchBranchContext>(i);
		}
		public SwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch; } }
	}

	[RuleVersion(0)]
	public SwitchContext @switch() {
		SwitchContext _localctx = new SwitchContext(Context, State);
		EnterRule(_localctx, 44, RULE_switch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			Match(SWITCH);
			State = 308;
			Match(LP);
			State = 309;
			expression(0);
			State = 310;
			Match(RP);
			State = 311;
			Match(LC);
			State = 313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 312;
				switchBranch();
				}
				}
				State = 315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 278098651648622724L) != 0) );
			State = 317;
			Match(RC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBranchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext[] @case() {
			return GetRuleContexts<CaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext @case(int i) {
			return GetRuleContext<CaseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CombatScriptParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CombatScriptParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CombatScriptParser.COMMA, i);
		}
		public SwitchBranchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBranch; } }
	}

	[RuleVersion(0)]
	public SwitchBranchContext switchBranch() {
		SwitchBranchContext _localctx = new SwitchBranchContext(Context, State);
		EnterRule(_localctx, 46, RULE_switchBranch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			@case();
			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 320;
				Match(COMMA);
				State = 321;
				@case();
				}
				}
				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 327;
			Match(COLON);
			State = 328;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(CombatScriptParser.DEFAULT, 0); }
		public CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case; } }
	}

	[RuleVersion(0)]
	public CaseContext @case() {
		CaseContext _localctx = new CaseContext(Context, State);
		EnterRule(_localctx, 48, RULE_case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUB:
			case BWNEG:
			case NEG:
			case LP:
			case LB:
			case NULL:
			case INT:
			case FLOAT:
			case BOOL:
			case STRING:
			case NEW:
			case ID:
				{
				State = 330;
				expression(0);
				}
				break;
			case DEFAULT:
				{
				State = 331;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(CombatScriptParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(CombatScriptParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(CombatScriptParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(CombatScriptParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(CombatScriptParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public For_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_loop; } }
	}

	[RuleVersion(0)]
	public For_loopContext for_loop() {
		For_loopContext _localctx = new For_loopContext(Context, State);
		EnterRule(_localctx, 50, RULE_for_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			Match(FOR);
			State = 335;
			Match(LP);
			{
			State = 336;
			statement();
			State = 337;
			Match(SEMICOLON);
			State = 338;
			expression(0);
			State = 339;
			Match(SEMICOLON);
			State = 340;
			statement();
			}
			State = 342;
			Match(RP);
			State = 343;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreach_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH() { return GetToken(CombatScriptParser.FOREACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(CombatScriptParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(CombatScriptParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CombatScriptParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(CombatScriptParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(CombatScriptParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public Foreach_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreach_loop; } }
	}

	[RuleVersion(0)]
	public Foreach_loopContext foreach_loop() {
		Foreach_loopContext _localctx = new Foreach_loopContext(Context, State);
		EnterRule(_localctx, 52, RULE_foreach_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			Match(FOREACH);
			State = 346;
			Match(LP);
			State = 347;
			Match(VAR);
			State = 348;
			Match(ID);
			State = 349;
			Match(IN);
			State = 350;
			expression(0);
			State = 351;
			Match(RP);
			State = 352;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(CombatScriptParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(CombatScriptParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(CombatScriptParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public While_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_loop; } }
	}

	[RuleVersion(0)]
	public While_loopContext while_loop() {
		While_loopContext _localctx = new While_loopContext(Context, State);
		EnterRule(_localctx, 54, RULE_while_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			Match(WHILE);
			State = 355;
			Match(LP);
			State = 356;
			expression(0);
			State = 357;
			Match(RP);
			State = 358;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 14);
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		case 4: return Precpred(Context, 9);
		case 5: return Precpred(Context, 8);
		case 6: return Precpred(Context, 7);
		case 7: return Precpred(Context, 6);
		case 8: return Precpred(Context, 5);
		case 9: return Precpred(Context, 3);
		case 10: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,59,361,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,5,0,58,
		8,0,10,0,12,0,61,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,3,1,77,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,5,1,112,8,1,10,1,12,1,115,9,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,5,3,
		124,8,3,10,3,12,3,127,9,3,3,3,129,8,3,1,3,1,3,1,4,1,4,1,4,1,4,5,4,137,
		8,4,10,4,12,4,140,9,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		3,5,154,8,5,1,6,1,6,1,6,1,6,5,6,160,8,6,10,6,12,6,163,9,6,1,7,1,7,1,7,
		1,7,1,7,1,7,5,7,171,8,7,10,7,12,7,174,9,7,3,7,176,8,7,1,7,1,7,1,8,1,8,
		1,8,1,8,1,9,1,9,1,9,1,9,5,9,188,8,9,10,9,12,9,191,9,9,3,9,193,8,9,1,9,
		1,9,1,9,1,9,1,9,5,9,200,8,9,10,9,12,9,203,9,9,1,9,3,9,206,8,9,1,10,1,10,
		1,10,1,10,4,10,212,8,10,11,10,12,10,213,3,10,216,8,10,1,10,1,10,1,11,1,
		11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,3,15,232,8,15,1,16,
		1,16,1,16,1,16,3,16,238,8,16,3,16,240,8,16,1,17,1,17,1,17,3,17,245,8,17,
		1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,3,18,255,8,18,1,19,1,19,1,19,1,
		19,1,19,1,19,3,19,263,8,19,1,19,1,19,3,19,267,8,19,1,20,1,20,5,20,271,
		8,20,10,20,12,20,274,9,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		3,20,285,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,5,21,299,8,21,10,21,12,21,302,9,21,1,21,1,21,3,21,306,8,21,1,22,1,22,
		1,22,1,22,1,22,1,22,4,22,314,8,22,11,22,12,22,315,1,22,1,22,1,23,1,23,
		1,23,5,23,323,8,23,10,23,12,23,326,9,23,1,23,1,23,1,23,1,24,1,24,3,24,
		333,8,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,
		26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,
		27,0,1,2,28,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
		42,44,46,48,50,52,54,0,8,1,0,3,4,1,0,1,2,1,0,11,12,1,0,13,18,1,0,1,6,1,
		0,8,12,1,0,20,21,1,0,36,37,397,0,59,1,0,0,0,2,76,1,0,0,0,4,116,1,0,0,0,
		6,119,1,0,0,0,8,132,1,0,0,0,10,153,1,0,0,0,12,155,1,0,0,0,14,164,1,0,0,
		0,16,179,1,0,0,0,18,183,1,0,0,0,20,207,1,0,0,0,22,219,1,0,0,0,24,221,1,
		0,0,0,26,223,1,0,0,0,28,225,1,0,0,0,30,227,1,0,0,0,32,239,1,0,0,0,34,241,
		1,0,0,0,36,254,1,0,0,0,38,266,1,0,0,0,40,284,1,0,0,0,42,286,1,0,0,0,44,
		307,1,0,0,0,46,319,1,0,0,0,48,332,1,0,0,0,50,334,1,0,0,0,52,345,1,0,0,
		0,54,354,1,0,0,0,56,58,3,40,20,0,57,56,1,0,0,0,58,61,1,0,0,0,59,57,1,0,
		0,0,59,60,1,0,0,0,60,62,1,0,0,0,61,59,1,0,0,0,62,63,5,0,0,1,63,1,1,0,0,
		0,64,65,6,1,-1,0,65,66,5,38,0,0,66,67,3,2,1,0,67,68,5,39,0,0,68,77,1,0,
		0,0,69,70,5,2,0,0,70,77,3,2,1,15,71,72,5,7,0,0,72,77,3,2,1,10,73,74,5,
		19,0,0,74,77,3,2,1,4,75,77,3,12,6,0,76,64,1,0,0,0,76,69,1,0,0,0,76,71,
		1,0,0,0,76,73,1,0,0,0,76,75,1,0,0,0,77,113,1,0,0,0,78,79,10,14,0,0,79,
		80,5,5,0,0,80,112,3,2,1,15,81,82,10,13,0,0,82,83,5,6,0,0,83,112,3,2,1,
		14,84,85,10,12,0,0,85,86,7,0,0,0,86,112,3,2,1,13,87,88,10,11,0,0,88,89,
		7,1,0,0,89,112,3,2,1,12,90,91,10,9,0,0,91,92,5,8,0,0,92,112,3,2,1,10,93,
		94,10,8,0,0,94,95,5,9,0,0,95,112,3,2,1,9,96,97,10,7,0,0,97,98,5,10,0,0,
		98,112,3,2,1,8,99,100,10,6,0,0,100,101,7,2,0,0,101,112,3,2,1,7,102,103,
		10,5,0,0,103,104,7,3,0,0,104,112,3,2,1,6,105,106,10,3,0,0,106,107,5,20,
		0,0,107,112,3,2,1,4,108,109,10,2,0,0,109,110,5,21,0,0,110,112,3,2,1,3,
		111,78,1,0,0,0,111,81,1,0,0,0,111,84,1,0,0,0,111,87,1,0,0,0,111,90,1,0,
		0,0,111,93,1,0,0,0,111,96,1,0,0,0,111,99,1,0,0,0,111,102,1,0,0,0,111,105,
		1,0,0,0,111,108,1,0,0,0,112,115,1,0,0,0,113,111,1,0,0,0,113,114,1,0,0,
		0,114,3,1,0,0,0,115,113,1,0,0,0,116,117,5,48,0,0,117,118,5,57,0,0,118,
		5,1,0,0,0,119,128,5,38,0,0,120,125,3,2,1,0,121,122,5,46,0,0,122,124,3,
		2,1,0,123,121,1,0,0,0,124,127,1,0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,
		126,129,1,0,0,0,127,125,1,0,0,0,128,120,1,0,0,0,128,129,1,0,0,0,129,130,
		1,0,0,0,130,131,5,39,0,0,131,7,1,0,0,0,132,133,5,40,0,0,133,138,3,2,1,
		0,134,135,5,46,0,0,135,137,3,2,1,0,136,134,1,0,0,0,137,140,1,0,0,0,138,
		136,1,0,0,0,138,139,1,0,0,0,139,141,1,0,0,0,140,138,1,0,0,0,141,142,5,
		41,0,0,142,9,1,0,0,0,143,154,5,57,0,0,144,154,5,52,0,0,145,154,5,51,0,
		0,146,154,5,54,0,0,147,154,5,55,0,0,148,154,5,50,0,0,149,154,3,16,8,0,
		150,154,3,18,9,0,151,154,3,20,10,0,152,154,3,14,7,0,153,143,1,0,0,0,153,
		144,1,0,0,0,153,145,1,0,0,0,153,146,1,0,0,0,153,147,1,0,0,0,153,148,1,
		0,0,0,153,149,1,0,0,0,153,150,1,0,0,0,153,151,1,0,0,0,153,152,1,0,0,0,
		154,11,1,0,0,0,155,161,3,10,5,0,156,160,3,4,2,0,157,160,3,6,3,0,158,160,
		3,8,4,0,159,156,1,0,0,0,159,157,1,0,0,0,159,158,1,0,0,0,160,163,1,0,0,
		0,161,159,1,0,0,0,161,162,1,0,0,0,162,13,1,0,0,0,163,161,1,0,0,0,164,165,
		5,56,0,0,165,166,5,57,0,0,166,175,5,38,0,0,167,172,3,2,1,0,168,169,5,46,
		0,0,169,171,3,2,1,0,170,168,1,0,0,0,171,174,1,0,0,0,172,170,1,0,0,0,172,
		173,1,0,0,0,173,176,1,0,0,0,174,172,1,0,0,0,175,167,1,0,0,0,175,176,1,
		0,0,0,176,177,1,0,0,0,177,178,5,39,0,0,178,15,1,0,0,0,179,180,5,51,0,0,
		180,181,5,47,0,0,181,182,5,51,0,0,182,17,1,0,0,0,183,192,5,38,0,0,184,
		189,5,57,0,0,185,186,5,46,0,0,186,188,5,57,0,0,187,185,1,0,0,0,188,191,
		1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,193,1,0,0,0,191,189,1,0,0,
		0,192,184,1,0,0,0,192,193,1,0,0,0,193,194,1,0,0,0,194,195,5,39,0,0,195,
		205,5,49,0,0,196,206,3,2,1,0,197,201,5,42,0,0,198,200,3,40,20,0,199,198,
		1,0,0,0,200,203,1,0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,204,1,0,0,
		0,203,201,1,0,0,0,204,206,5,43,0,0,205,196,1,0,0,0,205,197,1,0,0,0,206,
		19,1,0,0,0,207,215,5,40,0,0,208,211,3,2,1,0,209,210,5,46,0,0,210,212,3,
		2,1,0,211,209,1,0,0,0,212,213,1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,
		214,216,1,0,0,0,215,208,1,0,0,0,215,216,1,0,0,0,216,217,1,0,0,0,217,218,
		5,41,0,0,218,21,1,0,0,0,219,220,7,4,0,0,220,23,1,0,0,0,221,222,7,5,0,0,
		222,25,1,0,0,0,223,224,7,3,0,0,224,27,1,0,0,0,225,226,7,6,0,0,226,29,1,
		0,0,0,227,228,5,22,0,0,228,231,5,57,0,0,229,230,5,23,0,0,230,232,3,2,1,
		0,231,229,1,0,0,0,231,232,1,0,0,0,232,31,1,0,0,0,233,240,5,57,0,0,234,
		237,3,2,1,0,235,238,3,4,2,0,236,238,3,8,4,0,237,235,1,0,0,0,237,236,1,
		0,0,0,238,240,1,0,0,0,239,233,1,0,0,0,239,234,1,0,0,0,240,33,1,0,0,0,241,
		244,3,32,16,0,242,245,3,22,11,0,243,245,3,24,12,0,244,242,1,0,0,0,244,
		243,1,0,0,0,244,245,1,0,0,0,245,246,1,0,0,0,246,247,5,23,0,0,247,248,3,
		2,1,0,248,35,1,0,0,0,249,250,7,7,0,0,250,255,3,32,16,0,251,252,3,32,16,
		0,252,253,7,7,0,0,253,255,1,0,0,0,254,249,1,0,0,0,254,251,1,0,0,0,255,
		37,1,0,0,0,256,267,3,30,15,0,257,267,3,34,17,0,258,267,3,36,18,0,259,267,
		3,2,1,0,260,262,5,35,0,0,261,263,3,2,1,0,262,261,1,0,0,0,262,263,1,0,0,
		0,263,267,1,0,0,0,264,267,5,33,0,0,265,267,5,34,0,0,266,256,1,0,0,0,266,
		257,1,0,0,0,266,258,1,0,0,0,266,259,1,0,0,0,266,260,1,0,0,0,266,264,1,
		0,0,0,266,265,1,0,0,0,266,267,1,0,0,0,267,39,1,0,0,0,268,272,5,42,0,0,
		269,271,3,40,20,0,270,269,1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,272,
		273,1,0,0,0,273,275,1,0,0,0,274,272,1,0,0,0,275,285,5,43,0,0,276,277,3,
		38,19,0,277,278,5,45,0,0,278,285,1,0,0,0,279,285,3,50,25,0,280,285,3,52,
		26,0,281,285,3,54,27,0,282,285,3,42,21,0,283,285,3,44,22,0,284,268,1,0,
		0,0,284,276,1,0,0,0,284,279,1,0,0,0,284,280,1,0,0,0,284,281,1,0,0,0,284,
		282,1,0,0,0,284,283,1,0,0,0,285,41,1,0,0,0,286,287,5,24,0,0,287,288,5,
		38,0,0,288,289,3,2,1,0,289,290,5,39,0,0,290,300,3,40,20,0,291,292,5,25,
		0,0,292,293,5,24,0,0,293,294,5,38,0,0,294,295,3,2,1,0,295,296,5,39,0,0,
		296,297,3,40,20,0,297,299,1,0,0,0,298,291,1,0,0,0,299,302,1,0,0,0,300,
		298,1,0,0,0,300,301,1,0,0,0,301,305,1,0,0,0,302,300,1,0,0,0,303,304,5,
		25,0,0,304,306,3,40,20,0,305,303,1,0,0,0,305,306,1,0,0,0,306,43,1,0,0,
		0,307,308,5,26,0,0,308,309,5,38,0,0,309,310,3,2,1,0,310,311,5,39,0,0,311,
		313,5,42,0,0,312,314,3,46,23,0,313,312,1,0,0,0,314,315,1,0,0,0,315,313,
		1,0,0,0,315,316,1,0,0,0,316,317,1,0,0,0,317,318,5,43,0,0,318,45,1,0,0,
		0,319,324,3,48,24,0,320,321,5,46,0,0,321,323,3,48,24,0,322,320,1,0,0,0,
		323,326,1,0,0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,327,1,0,0,0,326,324,
		1,0,0,0,327,328,5,44,0,0,328,329,3,40,20,0,329,47,1,0,0,0,330,333,3,2,
		1,0,331,333,5,28,0,0,332,330,1,0,0,0,332,331,1,0,0,0,333,49,1,0,0,0,334,
		335,5,30,0,0,335,336,5,38,0,0,336,337,3,38,19,0,337,338,5,45,0,0,338,339,
		3,2,1,0,339,340,5,45,0,0,340,341,3,38,19,0,341,342,1,0,0,0,342,343,5,39,
		0,0,343,344,3,40,20,0,344,51,1,0,0,0,345,346,5,31,0,0,346,347,5,38,0,0,
		347,348,5,22,0,0,348,349,5,57,0,0,349,350,5,32,0,0,350,351,3,2,1,0,351,
		352,5,39,0,0,352,353,3,40,20,0,353,53,1,0,0,0,354,355,5,29,0,0,355,356,
		5,38,0,0,356,357,3,2,1,0,357,358,5,39,0,0,358,359,3,40,20,0,359,55,1,0,
		0,0,32,59,76,111,113,125,128,138,153,159,161,172,175,189,192,201,205,213,
		215,231,237,239,244,254,262,266,272,284,300,305,315,324,332
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
